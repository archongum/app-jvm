openapi: "3.0.3"
info:
  version: 1.0.0
  title: "User Center Demo"
  description: "User Center Demo"
  termsOfService: http://swagger.io/terms/
  contact:
    name: Archon
    email: archongum@outlook.com
    url: https://archongum.cn
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8080/api/v1
    description: Local
  - url: https://{env}-uc.archongum.cn/api/v1
    description: DEV/UAT
    variables:
      env:
        default: dev
        enum:
          - dev
          - uat
  - url: https://uc.archongum.cn/api/v1
    description: PRD
# #############################################
# Url
# #############################################
paths:
  # ######################
  # Auth
  # ######################
  /login:
    post:
      summary: "登录"
      description: "Login"
      tags:
        - Auth
      security:
        - BaiscAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          $ref: "#/components/responses/LoginOk"
        "500":
          $ref: "#/components/responses/Error"
  /logout:
    get:
      summary: "登出"
      description: "Logout"
      tags:
        - Auth
      parameters:
        - $ref: "#/components/parameters/Authorization"
      security:
        - BaiscAuth: []
      responses:
        "204":
          $ref: "#/components/responses/Ok204"
        "401":
          $ref: "#/components/responses/Error"
  # ######################
  # User
  # ######################
  /users:
    post:
      summary: "创建用户"
      description: "向账户中添加用户"
      tags:
        - User
      security:
        - BaiscAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
      responses:
        "201":
          description: "创建用户成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "500":
          $ref: "#/components/responses/Error"
    get:
      summary: "检索用户"
      description: "检索帐号下所有用户信息"
      tags:
        - User
      security:
        - BaiscAuth: []
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/PaginationIndex"
        - $ref: "#/components/parameters/PaginationLimit"
      responses:
        "200":
          description: "用户列表"
          content:
            application/json:
              schema:
                description: "用户列表"
                type: object
                properties:
                  users:
                    description: "用户列表"
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "500":
          $ref: "#/components/responses/Error"
  /users/{id}:
    get:
      summary: "查询用户"
      description: "查询特定用户"
      tags:
        - User
      security:
        - BaiscAuth: []
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - name: id
          description: "用户唯一标识"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "用户"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          $ref: "#/components/responses/Error"
    delete:
      summary: "删除用户"
      description: "删除用户"
      tags:
        - User
      security:
        - BaiscAuth: []
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - name: id
          description: "用户唯一标识"
          in: path
          required: true
          schema:
            type: string
            example: "123456"
      responses:
        "204":
          $ref: "#/components/responses/Ok204"
        "500":
          $ref: "#/components/responses/Error"
# #############################################
# Schema
# #############################################
components:
  securitySchemes:
    ApiKeyAuth: # arbitrary name for the security scheme
      type: apiKey
      in: header # can be "header", "query" or "cookie"
      name: Authorization # name of the header, query parameter or cookie
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Bearer
    BaiscAuth:
      type: http
      scheme: basic
  schemas:
    # ##########################
    # Login
    # ##########################
    LoginRequest:
      description: "Login Request"
      properties:
        type:
          description: "登录类型"
          type: string
          enum:
            - password
            - phone
            - wechat
        username:
          description: "用户名(type=password必选)"
          type: string
          example: "username"
        password:
          description: "密码(type=password必选)"
          type: string
          example: "password"
        verificationCode:
          description: "验证码(type=phone|wechat必选)"
          type: string
          example: "123456"
        refer:
          description: "授权来源；用于跳转(可选)"
          type: string
          example: "https://archongum.cn"
      required:
        - type
    LoginResponse:
      description: "Login Response"
      properties:
        token_type:
          description: "Token Type"
          type: string
          enum:
            - bearer
        access_token:
          description: "Access Token"
          type: string
          example: "eyJhbGxxx"
        refresh_token:
          description: "refresh token，一般refresh token过期时间会比access token长"
          type: string
          example: "eyJhbGxxx"
        expires_in:
          description: "多长时间之后过期，单位秒"
          type: integer
          example: 3600
        scope:
          description: "Oauth2.0协议中的scope，目前默认scope为ALL"
          type: string
          example: "ALL"
      required:
        - token_type
        - access_token
        - refresh_token
        - expires_in
        - scope
    # ######################
    # User
    # ######################
    User:
      description: "用户"
      type: object
      properties:
        id:
          description: "用户的唯一标识"
          type: string
        name:
          description: "用户的名称"
          type: string
          minLength: 2
          maxLength: 64
        email:
          description: "用户的联系邮箱"
          type: string
          minLength: 7
          maxLength: 128
        phone:
          description: "用户的联系电话"
          type: string
          minLength: 7
          maxLength: 32
        remark:
          description: "用户备注"
          type: string
        registTime:
          description: "用户注册时间/时间戳"
          type: integer
          format: int64
        deadline:
          description: "过期时间/时间戳，空值代表账号长期有效"
          type: integer
          format: int64
    UserCreateRequest:
      description: "创建用户的请求结构"
      type: object
      properties:
        name:
          description: "用户的名称"
          type: string
          minLength: 2
          maxLength: 50
        password:
          description: "用户的初始密码，不传则需要通过链接去初始化密码"
          type: string
          minLength: 6
          maxLength: 128
        email:
          description: "用户的联系邮箱"
          type: string
          minLength: 7
          maxLength: 128
        phone:
          description: "用户的联系电话"
          type: string
          minLength: 7
          maxLength: 32
        accountId:
          description: "企业ID"
          type: string
        departmentIds:
          description: "企业id列表，不传或者为空数组，则默认将用户添加到根部门下"
          type: array
          items:
            type: string
        deadline:
          description: "过期时间/时间戳，不传则代表账号长期有效"
          type: integer
          format: int64
        remark:
          description: "备注"
          type: string
    # ######################
    # Common
    # ######################
    Pagination:
      description: "分页"
      type: object
      properties:
        index:
          type: integer
          description: "当前页"
        limit:
          type: integer
          description: "每页数量"
        total:
          type: integer
          format: int64
          description: "总数"
      required:
        - index
        - limit
        - total
    ResponseBase:
      description: "基础响应"
      type: object
      properties:
        code:
          type: integer
          description: "状态码"
          default: 0
          minimum: 0
          maximum: 59999
        data:
          description: "返回数据"
          type: object
      required:
        - code
    # ######################
    # Exception
    # ######################
    ExceptionRequest:
      description: "请求参数异常: ServletRequestBindingException"
      properties:
        code:
          type: integer
          default: 59001
          readOnly: true
        data:
          type: object
      required:
        - code
        - data
    ExceptionRuntime:
      description: "系统异常: RuntimeException"
      properties:
        code:
          type: integer
          default: 59998
          readOnly: true
        data:
          type: string
          default: "系统异常，请联系管理员"
          readOnly: true
      required:
        - code
        - data
    ExceptionUnknown:
      description: "服务异常: Exception"
      properties:
        code:
          type: integer
          default: 59999
          readOnly: true
        data:
          type: string
          default: "服务异常，请联系管理员"
          readOnly: true
      required:
        - code
        - data
  responses:
    # ######################
    # Login
    # ######################
    LoginOk:
      description: "登录成功"
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ResponseBase"
              - type: object
                properties:
                  data:
                    $ref: "#/components/schemas/LoginResponse"
    # ######################
    # Common
    # ######################
    Ok200:
      description: "Http status code: 200"
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ResponseBase"
              - type: object
                properties:
                  data:
                    type: string
                    description: "正常返回数据"
                    example: "success"
    Ok204:
      description: "Http status code: 204"
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"
    Error:
      description: "错误响应"
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ResponseBase"
              - type: object
                properties:
                  data:
                    type: string
                    description: "返回错误信息"
                    example: "System Error"
  parameters:
    PaginationIndex:
      name: index
      description: "当前页"
      in: query
      required: true
      schema:
        type: integer
        minimum: 1
        default: 1
    PaginationLimit:
      name: limit
      description: "每页数量"
      in: query
      required: false
      schema:
        type: integer
        default: 10
    Authorization:
      name: Authorization
      description: Authorization
      in: header
      required: true
      schema:
        type: string
        example: "Bearer xxxxxxx"
  headers:
    X-Request-ID:
      schema:
        type: string
        description: "请求ID"
        example: "cc77d718-a91c-4a40-a53d-0bbe181728a0"
      required: true
